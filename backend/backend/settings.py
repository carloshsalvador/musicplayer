"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv


# Build paths inside the project like this: BASE_DIR / 'subdir'.
# __file__ works only when settings.py file is called from the shell!
# it means, the variable BASE_DIR will be not set by runing the code here, but by running the code in the shell!
# for test only, use the python terminal to set the path manually, e.g.: 
# __file__ = 'musicplayer\django01\django01\settings.py'
BASE_DIR = Path(__file__).resolve().parent.parent

# **** SECURITY WARNING ****
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

load_dotenv(dotenv_path=BASE_DIR / '.env') # .env on .gitignore and .dockerignore!

SECRET_KEY = os.getenv('DJANGO_SECRET_KEY')         # secrte and strong key!
DEBUG = os.getenv('DEBUG', 'False') == 'True'       # don't run with debug turned on in production!
ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '')      # website domain name or IP address

# SECURITY 'security.W...' (https://docs.djangoproject.com/en/5.1/ref/settings/#security)
# Securitty Middleware [see MIDDLEWARE below] 
# HTTP Strict Transport Security:
SECURE_HSTS_SECONDS = 31536000          # SecurityMiddleware will set this header on all HTTPS responses if non-zero integer value here (e.g. 31536000) [60*60*24*365 # 31536000 = 1 year in seconds]
SECURE_HSTS_INCLUDE_SUBDOMAINS = True   # SecurityMiddleware will add the includeSubDomains directive to the Strict-Transport-Security header if True [= assuming all subdomains are served exclusively using HTTPS], otherwise the site may still be vulnerable via an insecure connection to a subdomain.
SECURE_HSTS_PRELOAD = True              # SecurityMiddleware will add the preload directive to the Strict-Transport-Security header if True [= the site is included in the HSTS preload list], which is a list of sites that are hardcoded into browsers as HTTPS only.
# SSL Redirect:
SECURE_SSL_REDIRECT = True              # SecurityMiddleware will permanently redirect all HTTP connections to HTTPS. https://docs.djangoproject.com/en/5.1/ref/middleware/#ssl-redirect
# Cross Site Request Forgery Protection: 
SESSION_COOKIE_SECURE = True            # SecurityMiddleware will set the session cookie with the Secure flag. With this flag set, the browser will prevent the cookie from being sent over an unencrypted HTTP connection.
CSRF_COOKIE_SECURE = True               # SecurityMiddleware will set the CSRF cookie with the Secure flag. With this flag set, the browser will prevent the cookie from being sent over an unencrypted HTTP connection.

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "music_player_app",
    "api",
    "rest_framework"
]

# MIDDLEWAR ~ SecurityMiddleware (SEE ABOVE)
# https://docs.djangoproject.com/en/5.1/ref/middleware/#module-django.middleware.security
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
